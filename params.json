{"name":"Backup management (Django)","body":"What\r\n====\r\n\r\nThis is backup management software used by Futurice. Every employee can create\r\npersonal backup disk (virtual disk in LVM) using this website. System sets up separate user account and password for backups. \r\nIdea is to separate backups from normal user passwords.\r\n\r\nPrerequisities\r\n--------------\r\n\r\n* Backup storage in LVM volume (/dev/backupdisks in our setup)\r\n* ext4 (or btrfs, may not work. We use ext4 at Futurice)\r\n* ACLs enabled\r\n* Django installed (>= 1.4)\r\n* django_compressor (at least version 1.2a1 works, most probably others too)\r\n* yui-compressor\r\n* Web server with authentication (We use single sign-on at Futurice, but for example basic auth is fine). Preferrably https as the password is rather sensitive information.\r\n* Samba (for Windows backups, see also INSTALL.samba.md)\r\n* netatalk (for AFP support, see also INSTALL.afp.md)\r\n* rrdtool\r\n\r\nCopy-paste for installing packages:\r\n\r\n```\r\napt-get install e2fslibs e2fsprogs apache2 libapache2-mod-fastcgi python-flup samba rrdtool python-django yui-compressor\r\npip install django_compressor\r\n```\r\n\r\n* netatalk installation\r\n* samba configuration\r\n* LVM configuration\r\n\r\nQuick installation\r\n------------------\r\n\r\n1. Install prerequisities\r\n1. add \"backupmanagement\" user\r\n1. checkout code to /home/backupmanagement/\r\n1. add sudoers entry (see below) and configure wrappers\r\n1. Check values in backup/settings.py (at least LVM_ROOT and DIRECTORIES_ROOT)\r\n1. In directory backup/ run \"python manage.py check_prerequisities\". Fix possible problems.\r\n1. run \"python manage.py syncdb\"\r\n1. run \"python manage.py collectstatic; python manage.py compress --force\"\r\n1. start fastcgi server: \"sudo -u backupmanagement -i; cd backup; ./bin/start.sh\"\r\n1. configure apache2\r\n1. add crontab entries (see below)\r\n\r\nNotes\r\n-----\r\n\r\nWe recommend using FastCGI for better privilege separation. You should never run this application\r\nunder web server user. This application requires quite many sudo permissions, and it's bad idea\r\nto grant those to web server (and every application running under it).\r\n\r\nCrontab entries in our configuration\r\n------------------------------------\r\n\r\nThis is optional. Without crontab entries, no history graphs will be generated. Also, \r\n*@reboot* line starts FastCGI application after reboot - if you skip that, it might be good\r\nidea to write short init script instead (or use *rc.local*, depending on your distribution).\r\n\r\nAdd to backupmanagement user crontab:\r\n\r\n```\r\nsudo -u backupmanagement crontab -e\r\n```\r\n\r\nfollowing lines:\r\n\r\n```\r\n@reboot /home/backupmanagement/backup/bin/start.sh # starts fastcgi server on reboot.\r\n* * * * * cd /home/backupmanagement/backup; python manage.py rrd_waittime\r\n*/5 * * * * cd /home/backupmanagement/backup; python manage.py update_df_stats\r\n```\r\n\r\nExample apache configuration\r\n----------------------------\r\n\r\n* enable ssl\r\n* enable whatever authentication, for example basic auth. Alternatively, you can modify Django application to use built-in user database.\r\n\r\n```\r\nRewriteEngine on\r\nFastCGIExternalServer /var/www/backup.fcgi -socket /home/backupmanagement/backup/backup.sock\r\n\r\nRewriteRule ^/backup/static/(.*)$ /home/backupmanagement/backup/static/$1 [L]\r\nRewriteRule ^/backup/(.*)$ /backup.fcgi/$1 [QSA,L]\r\n```\r\n\r\nConfiguring sudo rights and sudo wrappers\r\n-----------------------------------------\r\n\r\nIMPORTANT: If wrappers directory is inside a directory owned by \r\nuser running Django application, compromised account leads to total compromise of the system.\r\nSteps to protect against this:\r\n\r\n```\r\nmkdir -p /opt/backupmanagement\r\ncp -R /home/backupmanagement/wrappers /opt/backupmanagement/wrappers/\r\nchown -R root:root /opt/backupmanagement \r\nchmod -R 700 /opt/backupmanagement/*\r\n```\r\n\r\nAdd this line to sudoers (*sudo visudo*):\r\n\r\n```\r\nbackupmanagement ALL=NOPASSWD: /opt/backupmanagement/wrappers/chmod.py, /opt/backupmanagement/wrappers/chown.py, /opt/backupmanagement/wrappers/chpasswd.py, /opt/backupmanagement/wrappers/defragment-btrfs.py, /opt/backupmanagement/wrappers/deluser.py, /opt/backupmanagement/wrappers/df.py, /opt/backupmanagement/wrappers/dmsetup.py, /opt/backupmanagement/wrappers/fetch_backups.py, /opt/backupmanagement/wrappers/lvcreate.py, /opt/backupmanagement/wrappers/lvdisplay.py, /opt/backupmanagement/wrappers/lvextend.py, /opt/backupmanagement/wrappers/lvremove.py, /opt/backupmanagement/wrappers/mkdir.py, /opt/backupmanagement/wrappers/mkfs-ext4.py, /opt/backupmanagement/wrappers/mount.py, /opt/backupmanagement/wrappers/resize2fs.py, /opt/backupmanagement/wrappers/rmdir.py, /opt/backupmanagement/wrappers/rm-timemachine.py, /opt/backupmanagement/wrappers/setfacl.py, /opt/backupmanagement/wrappers/smbpasswd.py, /opt/backupmanagement/wrappers/umount.py, /opt/backupmanagement/wrappers/useradd.py\r\n```\r\n\r\nAlso, check that *env_reset* is enabled in sudoers configuration (usually it's on by \r\ndefault).\r\n\r\nAll sudo commands go through python wrappers. That way backupmanagement \r\nuser can only run specific commands with safe arguments. For example, \r\ncompromised user can only delete backups, not random files from OS. It \r\ncan't change root password or add new user with uid/gid 0 etc. \r\nUnfortunately, attacker with access to backupmanagement user can change \r\nother users passwords and access backup files. Preventing this while still \r\nallowing automatic configuration is not possible.\r\n\r\nYou may want to add administrators (basically everyone with additional\r\nsudo rights) to wrappers/wrappers_settings.py file to prevent changes\r\nto admin passwords and/or files. If you change this file, be sure to copy\r\nit to */opt/backupmanagement/wrappers* (or any other directory you are using\r\nfor sudo wrappers).\r\n\r\nTODO\r\n----\r\n\r\nWill do some day:\r\n- better error handling (now just throws traceback to user)\r\n- tested btrfs support\r\n\r\nOur setup\r\n---------\r\n\r\nAll employees can create their own backup spaces. Our setup currently \r\nsupports Windows backups over samba (unfortunately, Windows 7 complains \r\nthat \"Your files are not protected\", no idea how to fix that) and Mac OS \r\nX Time Machine over AFP. For AFP instructions, check out \r\nINSTALL.afp.md. We had some difficulties with setting up AFP, and to \r\nget it working with Mac OS X Lion.\r\n\r\nWe use newest Ubuntu LTS (as a time of writing, 12.04). Our servers run \r\non virtual machines under KVM. One of backup servers use disk rack \r\nconnected to PCI-E RAID controller (RAID5 + hot spare), other one is \r\nSynology NAS device with RAID6 over iSCSI in separate network.\r\n\r\nAutentication is handled by single sign-on, so no manual user account\r\nmanagement for this system is required at all.\r\n","tagline":"Interface for managing personal backup spaces","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}